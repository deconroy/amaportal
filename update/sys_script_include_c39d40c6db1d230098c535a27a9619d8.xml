<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ama_portal.AMAUtil</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>AMAUtil</name>
        <script><![CDATA[var AMAUtil = Class.create();
AMAUtil.prototype = {
    initialize: function() {
		this.event_table = "x_snc_ama_portal_event";
		this.question_table = "x_snc_ama_portal_question";
		this.vote_table = "x_snc_ama_portal_vote";
		this.comment_table = "x_snc_ama_portal_comment";
    },
	
	getEventList: function() {
		var events = [];
		var event = new GlideRecord(this.event_table);
		event.query();
		while (event.next()) {
			events.push(this._buildEventObject(event));
		}
		return events;
	},
	
	getEventDetails: function(eventID) {
		var event = new GlideRecord(this.event_table);
		event.get(eventID);
		var eventObj = this._buildEventObject(event, true);
		eventObj.questions = this.getQuestionsForEvent(eventID);
		return eventObj;
	},
	
	getQuestionsForEvent: function(eventID) {
		var questions = [];
		var question = new GlideRecord(this.question_table);
		question.addQuery("event", eventID);
		question.query();
		while(question.next()) {
			questions.push(this._buildQuestionObject(question));
		}
		return questions;
	},
	
	getVoteDataForQuestion: function(questionId) {
		var user = gs.getUserID();
		var question = new GlideRecord(this.question_table);
		question.get(questionId);
		var score = parseInt(question.score);
		var vote = new GlideRecord(this.vote_table);
		vote.addQuery("question", questionId);
		vote.addQuery("user", user);
		vote.query();
		var up = false;
		var down = false;
		if (vote.next()) {
			var currentVote = parseInt(vote.getValue("vote"));
			if (currentVote > 0) {
				up = true;
			} else if (currentVote < 0) {
				down = true;
			}
		}
		return {
			up: up,
			down: down,
			score: score
		};
	},
	
	updateMyVote: function(questionId, score) {
		var user = gs.getUserID();
		var vote = new GlideRecord(this.vote_table);
		vote.addQuery("question", questionId);
		vote.addQuery("user", user);
		vote.query();
		if (vote.next()) {
			vote.setValue("vote", score);
			return vote.update();
		} else {
			vote.initialize();
			vote.setValue("question", questionId);
			vote.setValue("user", user);
			vote.setValue("vote", score);
			return vote.insert();
		}
	},
	
	//called from BR on insert/update/delete of vote record
	processVote: function(voteRecord) {
		var questionId = voteRecord.getValue("question");
		var question = new GlideRecord(this.question_table);
		question.get(questionId);
		var vote = new GlideRecord(this.vote_table);
		vote.addQuery("question", questionId);
		vote.addQuery("sys_id", "!=", voteRecord.getUniqueValue());
		vote.query();
		var totalVote = parseInt(voteRecord.getValue("vote"));
		while (vote.next()) {
			totalVote += parseInt(vote.getValue("vote"));
		}
		question.score = totalVote;
		question.update();
	},
	
	_buildEventObject: function(event, include_description) {		
		var returnObj = {
			name:         event.getDisplayValue(),
			date:         event.getDisplayValue("when"),				
			type:         "event",
			id:           event.getUniqueValue(),
			href:         "?event=" + event.getUniqueValue()				
		};
		if(include_description) {
			returnObj.description = event.getValue('event_description');
		}
		return returnObj;
	},
	
	_buildQuestionObject: function(question) {
		var voteData = this.getVoteDataForQuestion(question.getUniqueValue());
		return {
			name: question.getDisplayValue(),
			created: question.getDisplayValue("sys_created_on"),
			type: "question",
			user: question.getDisplayValue("sys_created_by"),
			id: question.getUniqueValue(),
			score: voteData.score,
			up: voteData.up,
			down: voteData.down,
			comments: this._getCommentsArray(question.getUniqueValue())
		};
	},
	
	_getCommentsArray: function(question) {
		var comments = [];
		var comment = new GlideRecord(this.comment_table);
		comment.addQuery("question", question);
		comment.query();
		while (comment.next()) {
			comments.push({
				comment: comment.getValue("comment"),
				when: comment.getDisplayValue("sys_created_on"),
				by: comment.getValue("sys_created_by"),
				id: comment.getDisplayValue()
			});
		}
		return comments;
	},
	
	processRegistration: function(username) {
		if (!username) {
			return false;
		} else {
			var existingUser = this._getUser(username);
			
			if (!existingUser) {
				var createdUser = this._createUser(username);

				if (createdUser) {
					this._emailCredentials(createdUser);
					return createdUser.sys_id.toString();
				} else {
					return false;
				}
			} else {
				return null;
			}
		}
	},
	
	processPasswordReset: function(username) {
		if (!username) {
			return false;
		} else {
			var existingUser = this._getUser(username);
			
			if (existingUser) {
				this._emailCredentials(existingUser);
				return existingUser.sys_id.toString();
			} else {
				return null;
			}
		}
	},
	
	setPassword: function(username) {
		gs.info("setPassword: username is: " + username);

		if (!username) {
			return false;
		} else {
			var password = this._generatePassword(10);
			var existingUser = this._getUser(username);
			
			if (existingUser) {
				existingUser.user_password.setDisplayValue(password);
				existingUser.setValue("active", true);
				existingUser.setValue("locked_out", false);
				existingUser.setValue("password_needs_reset", true);
				existingUser.update();

				return password.toString();
			} else {
				return false;
			}
		}
	},
	
	_createUser: function(username) {
		if (!username) {
			return false;
		} else {
			var usrGR = new GlideRecord("sys_user");
			usrGR.initialize();
			usrGR.setValue("email", username);
			usrGR.setValue("user_name", username);
			var newUserId = usrGR.insert();
			
			return (newUserId) ? usrGR : false;
		}
	},
	
	_getUser: function(username) {
		if (!username) {
			return false;
		} else {
			var usrGR = new GlideRecord("sys_user");
			usrGR.addQuery("user_name", username);
			usrGR.addQuery("active", true);
			usrGR.query();
			
			if (usrGR.hasNext()) {
				while (usrGR.next()) {
					return usrGR;
				}
			} else {
				return false;
			}
		}
	},
	
	_generatePassword: function(length) {
		var allowedStr = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%()",
			pwdLength = length || 10,
			generatedPassword = "";
		
		for (var ctr = 0; ctr < pwdLength; ctr++) {
			generatedPassword += allowedStr[Math.floor(Math.random() * allowedStr.length)];
		}
		
		return generatedPassword;
	},
	
	_emailCredentials: function(userGR) {
		if (!userGR) {
			return false;
		} else {
			gs.eventQueue("x_snc_ama_portal.password.reset", userGR, userGR.sys_id.toString(), "ama_password_reset");
		}
	},

    type: 'AMAUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-23 04:04:00</sys_created_on>
        <sys_id>c39d40c6db1d230098c535a27a9619d8</sys_id>
        <sys_mod_count>46</sys_mod_count>
        <sys_name>AMAUtil</sys_name>
        <sys_package display_value="Ask Me Anything Portal" source="x_snc_ama_portal">b3bab771dbd9230098c535a27a961968</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Ask Me Anything Portal">b3bab771dbd9230098c535a27a961968</sys_scope>
        <sys_update_name>sys_script_include_c39d40c6db1d230098c535a27a9619d8</sys_update_name>
        <sys_updated_by>josh.soutar</sys_updated_by>
        <sys_updated_on>2018-11-14 06:09:58</sys_updated_on>
    </sys_script_include>
</record_update>
