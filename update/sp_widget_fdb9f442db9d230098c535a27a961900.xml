<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $window, $location, glideUserSession, glideSystemProperties, spUtil) {
	var c = this;
	c.remember_me = c.data.forgetMeDefault;
	
	c.login = function(username, password) {	
		var url = spUtil.getURL({sysparm_type: 'view_form.login'});
		
		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;

		return $http({
			method: 'post',
			url: url,
			data: $.param({
				'sysparm_type': 'login',
				'ni.nolog.user_password': true,
				'remember_me': !!c.remember_me ? true : false,
				'user_name': username,
				'user_password': password,
				'get_redirect_url': true,
				'sysparm_goto_url': isLoginPage ? null : $location.url()
			}),
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		}).then(function(response) {
			if (!response.data) {
				c.message = $scope.data.errorMsg;
				return;
			}

			if (response.data.status == 'success') {
				c.success = response.data.message;
				$window.location = response.data.redirect_url;
			} else {
				// wrong username or password
				c.message = response.data.message;
				c.password = "";
				c.username = "";
				angular.element("#username").focus();
			}

		}, function errorCallback(response) {
			c.message = $scope.data.errorMsg;
		});
	};
	
	c.register = function(username) {
		if (/.*servicenow.com$/.test(username)) {
			c.message = null;

			c.server.get({
				"action": "register",
				"username": username
			}).then(function(response) {
				console.log(response.data);

				if (typeof response.data.result.registerFailure !== "undefined") {
					c.message = response.data.result.registerFailure;
				}

				if (typeof response.data.result.registerSuccess !== "undefined") {
					c.success = response.data.result.registerSuccess;
				}
			}, function errorCallback(response) {
				c.message = $scope.data.errorMsg;
			});
		} else {
			c.message = "You must enter a ServiceNow (firsname.lastname@servicenow.com) email address";
		}
	};
	
	c.passwordReset = function(username) {
		if (/.*servicenow.com$/.test(username)) {
			c.message = null;

			c.server.get({
				"action": "passwordReset",
				"username": username
			}).then(function(response) {
				console.log(response.data);
				if (typeof response.data.result.passwordResetFailure !== "undefined") {
					c.message = response.data.result.passwordResetFailure;
				}

				if (typeof response.data.result.passwordResetSuccess !== "undefined") {
					c.success = response.data.result.passwordResetSuccess;
				}
			}, function errorCallback(response) {
				c.message = $scope.data.errorMsg;
			});
		} else {
			c.message = "You must enter a ServiceNow (firstname.lastname@servicenow.com) email address";
		}
	};
	
	c.beginRegistration = function() {
		c.data.beginRegistration = true;
	};
	
	c.beginPasswordReset = function() {
		c.data.beginPasswordReset = true;
	};
	
	c.abandonRegistration = function() {
		c.data.beginRegistration = false;
		c.message = null;
		c.success = null;
	};
	
	c.abandonPasswordReset = function() {
		c.data.beginPasswordReset = false;
		c.message = null;
		c.success = null;
	};
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.form-control,&#13;
label[for="username"],&#13;
label[for="password"] {&#13;
  color: black;&#13;
}&#13;
&#13;
.btn {&#13;
  font-weight: 600;&#13;
  font-size: 1.5rem;&#13;
  background-color: #176AAD;&#13;
  border-color: #0B4E85;&#13;
}&#13;
&#13;
.form-signin {&#13;
  text-align: center;&#13;
}&#13;
&#13;
.container-signin {&#13;
  background: #eee;&#13;
  border: 1px solid #ccc;&#13;
  padding: 20px 20px 5px;&#13;
  display: inline-block;&#13;
  text-align: left;&#13;
}&#13;
&#13;
.form-link {&#13;
  height: 30px;&#13;
  text-align: right;&#13;
}&#13;
&#13;
.form-link a {&#13;
  cursor: pointer;&#13;
  display: inline-block;&#13;
  margin-left: 15px;&#13;
  margin-top: 5px;&#13;
}&#13;
&#13;
.separator {&#13;
  border: 0;&#13;
  height: 1px;&#13;
  color: #ccc;&#13;
  background: #ccc;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>ama_login</id>
        <internal>false</internal>
        <link/>
        <name>ama_login</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	if (input && input.action === "register") {
		var registerResult = new x_snc_ama_portal.AMAUtil().processRegistration(input.username);
		
		if (registerResult === false) {
			data.result = { registerFailure: "There was an error during registration" };
		} else if (registerResult === null) {
			data.result = { registerFailure: "A user with this username already exists" };
		} else {
			data.result = { registerSuccess: "An account has been created for you. You will receive an email shortly with your credentials." };
		}

		return;
	}

	if (input && input.action === "passwordReset") {
		var passwordResetResult = new x_snc_ama_portal.AMAUtil().processPasswordReset(input.username);
		
		if (passwordResetResult === false) {
			data.result = { passwordResetFailure: "There was an error resetting your password" };
		} else if (passwordResetResult === null) {
			data.result = { passwordResetFailure: "A user with this username does not exist" };
		} else {
			data.result = { passwordResetSuccess: "Your password was successfully reset. You will receive an email shortly with your new password." };
		}

		return;
	}
	
	data.beginRegistration = false;
	data.beginPasswordReset = false;
	
	data.errorMsg = gs.getMessage("There was an error processing your request");
	data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
	data.passwordMsg = gs.getMessage("Password");
	data.usernameMsg = gs.getMessage("User name (firstname.lastname@servicenow.com)");
	data.forgetMeDefault = false;
	data.is_logged_in = gs.getSession().isLoggedIn();
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-23 07:14:39</sys_created_on>
        <sys_id>fdb9f442db9d230098c535a27a961900</sys_id>
        <sys_mod_count>102</sys_mod_count>
        <sys_name>ama_login</sys_name>
        <sys_package display_value="Ask Me Anything Portal" source="x_snc_ama_portal">b3bab771dbd9230098c535a27a961968</sys_package>
        <sys_policy/>
        <sys_scope display_value="Ask Me Anything Portal">b3bab771dbd9230098c535a27a961968</sys_scope>
        <sys_update_name>sp_widget_fdb9f442db9d230098c535a27a961900</sys_update_name>
        <sys_updated_by>sanjiv.viswanath</sys_updated_by>
        <sys_updated_on>2018-10-30 04:15:36</sys_updated_on>
        <template><![CDATA[<div ng-if="!data.is_logged_in">
  <!--
This widget needs to:
- let people register with a servicenow email address. either send them a random password, or let them choose one.
- validation: must be an sn email address, and must not already be used
- let people login if they have registered
- let people reset password (send a random password (doesn't need to be complex) to their sn email
- the user profile created only needs a user_name (should be their sn email addy) and a password. don't worry about the rest for now
- after login, the page should automatically reload to /amaportal
-->
 
  <form class="form-signin" ng-submit="c.login(c.username, c.password)" method="post" ng-if="!c.data.beginPasswordReset && !c.data.beginRegistration">
    <div class="col-md-12">

      <div class="col-md-3"></div>

      <div class="col-md-6 container-signin">
        <div class="form-group">
          <label for="username" class="sr-only">{{ ::data.usernameMsg }}</label>
          <input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border" type="text" placeholder='{{::data.usernameMsg}}' autofocus="true" ng-model="c.username"/>
        </div>

        <div class="form-group" ng-if="!c.begin_registration">
          <label for="password" class="sr-only">{{ ::data.passwordMsg }}</label>
          <input id="password" name="password" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border" type="password" placeholder='{{::data.passwordMsg}}' ng-model="c.password"/>
        </div>
        
        <div ng-if="c.message" class="alert alert-danger" role="alert">{{c.message}}</div>
        <div ng-if="c.success" class="alert alert-success" role="alert">{{c.success}}</div>

        <div class="form-group row">
          <div class="col-md-6">
            <button type="submit" class="btn btn-primary" ng-disabled="!c.username || !c.password"><span class="fa fa-sign-in"></span>&nbsp;${Log in}</button>
          </div>

          <div class="col-md-6">
            <div class="form-link">
              <a ng-click="c.beginRegistration()"><span class="fa fa-user"></span>&nbsp;${Register}</a>
              <a ng-click="c.beginPasswordReset()"><span class="fa fa-unlock-alt"></span>&nbsp;${Forgot password?}</a>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-3"></div>
    </div>
  </form>
  
  <form class="form-signin" ng-submit="c.register(c.username)" method="post" ng-if="c.data.beginRegistration">
    <div class="col-md-12">

      <div class="col-md-3"></div>

      <div class="col-md-6 container-signin">
        <div class="form-group">
          <label for="username" class="sr-only">{{ ::data.usernameMsg }}</label>
          <input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border" type="text" placeholder='{{::data.usernameMsg}}' autofocus="true" ng-model="c.username"/>
        </div>
        
        <div ng-if="c.message" class="alert alert-danger" role="alert">{{c.message}}</div>
        <div ng-if="c.success" class="alert alert-success" role="alert">{{c.success}}</div>

        <div class="form-group row">
          <div class="col-md-6">
            <button type="submit" class="btn btn-primary" ng-disabled="!c.username"><span class="fa fa-user"></span>&nbsp;${Register}</button>
          </div>

          <div class="col-md-6">
            <div class="form-link">
              <a ng-click="c.abandonRegistration()"><span class="fa fa-chevron-left"></span>&nbsp;${Back to login}</a>
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-3"></div>
    </div>
  </form>
  
  <form class="form-signin" ng-submit="c.passwordReset(c.username)" method="post" ng-if="c.data.beginPasswordReset">
    <div class="col-md-12">

      <div class="col-md-3"></div>

      <div class="col-md-6 container-signin">
        <div class="form-group">
          <label for="username" class="sr-only">{{ ::data.usernameMsg }}</label>
          <input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border" type="text" placeholder='{{::data.usernameMsg}}' autofocus="true" ng-model="c.username"/>
        </div>
        
        <div ng-if="c.message" class="alert alert-danger" role="alert">{{c.message}}</div>
        <div ng-if="c.success" class="alert alert-success" role="alert">{{c.success}}</div>

        <div class="form-group row">
          <div class="col-md-6">
            <button type="submit" class="btn btn-primary" ng-disabled="!c.username"><span class="fa fa-unlock-alt"></span>&nbsp;${Reset password}</button>
          </div>

          <div class="col-md-6">
            <div class="form-link">
              <a ng-click="c.abandonPasswordReset()"><span class="fa fa-chevron-left"></span>&nbsp;${Back to login}</a>
            </div>
          </div>
      </div>

      <div class="col-md-3"></div>
    </div>
  </form>

</div>]]></template>
    </sp_widget>
</record_update>
